Проанализируйте схему и описание системы.
Идентифицируйте существующие и потенциальные проблемные места. Напишите их список.

- Нереплицируемая БД (при высокой нагрузке хорошо было бы разделить чтение и запись хотя бы в тех местах, где это возможно)
- Каждое прилоежние имеет по одному инстансу
    - Масштабирование - неплохо было бы иметь возможность по метрикам изменять количество инстансов в зависимости от нагрузки на систему
    - Отказоустойчивость - в случае проблем в ЦОДе, в котором размещено приложение, оно перестанет быть доступным
- Проблемы с релизами
    - Ручной деплой может быть опасен ошибками или незадокументированными командами
    - Почему-то тесты отсутствуют в релизе и продакшене
    - Нет автоматического тестирования (один QA вручную делает это), отсюда и задержки (больше функционала, больше тестить), появление багов (нельзя во время разработки прогнать тесты и проверить)
- Бас-фактор
    - DevOps, QA, Бэкенд C#, React - уникальные персоны, в случае болезни/отпуска/увольнения могут возникнуть трудности в обеспечении из функций
    - Стек размазан:
        - фронтенд есть и React, и Vue
        - бэкенд - Sprint Boot и C#
- Статусы заказов размазаны по разным системам (онлайн магазин, CRM, MES) - и ни один сервис как будто не является мастером этих данных
- Нет мониторинга, алертов и логгирования

-----------------

Разработайте инициативы, которые необходимы для устранения нежелательных ситуаций.
Запишите их в список.

- Репликация БД
- Поддержание нескольких инстансов приложений (и балансировка)
- Изменение количества инстансов приложений в зависимости от нагрузки (авто скейлинг)
- Расширение команды React и C#
- Добавление observability: логирование, алерты, метрики
- Внедрение Feature flags для точечного тестирования и раскатки необходимых фич
- Написать и поддерживать актуальными автоматические тесты (юнит, интеграционные, e2e)
- Вынесение работы с заказами в отдельный сервис (либо закрепить в одном из существующих)
- Автоматизация CI/CD на всех ветках и слоях (окружениях)

-----------------

Расставьте инициативы в порядке приоритета. Опишите ход своих рассуждений и ответьте на вопросы:
- Какой вы видите целевую архитектуру через полгода?
- Если бы у вас была возможность выполнить только
    три пункта из списка инициатив в ближайшие полгода, что бы вы выбрали и почему?
    Не обязательно добавлять в список только эпики.
    Вы можете включить в план как крупные изменения, так и локальные задачи.

1. Внедрение автоматических тестов
2. Вынесение работы с заказами в отдельный сервис (либо закрепить в одном из существующих)
3. Автоматизация CI/CD на всех ветках и слоях (окружениях)
4. Добавление observability: логирование, алерты, метрики
5. Поддержание нескольких инстансов приложений + балансировка
6. Авто скейлинг приложений
7. Репликация БД: чтение и запись отдельно
8. Внедрение feature flags для точечной раскатки и возможности отката
9. Расширение команды React и C#

I. Тесты - бутылочное горлышко с двух сторон - со стороны релиза, и со стороны специалистов.
И оно будет все больше и больше тормозить выпуск. Если решить проблему с тестами, багов станет меньше,
релизы будут чаще, то, из-за чего уходят клиенты будет исправляться

II. Проблемы с потерей заказа (просрочкой выполнения) могут быть связаны с децентрализованной информаций о статусе заказа
И чтобы решить эту проблему, предлагается создание сервиса управления состоянием заказа
Это может прибавить надежности всей системе

III. Случайная выкатка неработающего кода может оказаться проблемой (например, откат последствий миграциии в бд, изменение
статусов, простой системы без канареечных релизов или сине-зеленого деплоя).
Пофиксить не очень сложно, а спасти от глупости поможет
