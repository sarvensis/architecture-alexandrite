Мотивация

Сейчас команда не может определить, где "зависают" заказы
Клиенты жалются, происходит потеря сообщений, повышается нестабильность интеграции между компонентами системы,
а отсутствие сквозной трассировки действий между компонентами (онлайн магазин, CRM, MES) приводит к:
- Росту SLA
- Увеличению количества обращений в поддержку
- Неоперативная локализация и устранение проблемы
- Репутационные риски, утрата доверия со стороны бизнеса и клиентов

Внедрение трейсинга позволит определить где и почему случаются зависания,
оперативнее расследовать инциденты, иметь полную картину выполнения операций по сквозным идентификаторам


Онлайн-магазин (Vue + Spring Boot):
- API оформления заказа
- Загрузка/создание 3D-модели

CRM (Vue + Spring Boot):
- Подтверждение заказа
- Завершение заказа

MES (React + C#):
- Расчёт стоимости заказа
- Начало/завершение производства

+RabbitMQ

-----------------


Предлагаемое решение

Использование OpenTelemetry с экспортом данных в Jaeger
Необходимо интегрировать трейсинг во всех backend приложениях (Java, .NET, RabbitMQ)

Схема: https://drive.google.com/file/d/1MCZ26z9j67rNHQ7jg7_BvGWdZBie7xFH/view?usp=sharing


-----------------


Компромиссы

- Проприетарные модули (например, в MES или CRM), могут не поддерживать OpenTelemetry без доработок
- Так как стек приложений разный, разный формат логирования может усложнить внедрение
- Время на понимание технологий, развертывание и внедрение
- Потенциальная деградация производительности


-----------------


Безопасность

- Подключение к Jaeger через VPN, аутентификация через корпоративный SSO
- Просмотр должен быть ограничен для всех сотрудников, исключение составляют администраторы и разработчики (+, если необходимо, поддержка)
- Трафик через LTS
- Маскирование данных в трейсинге
