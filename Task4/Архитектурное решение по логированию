Анализ

Создание заказа, логгируем order_id, user_id, timestamp
Изменение статуса заказа, логгируем order_id, old_status, new_status, system, timestamp
Отправка сообщения в RabbitMQ, логгируем order_id, routing_key, timestamp
Получение сообщения, логгируем order_id, consumer, timestamp
Вызов внешнего API, логгируем endpoint, response_code, latency, request_id
Аутентификация пользователя, логгируем user_id, result, timestamp
Ошибка при сохранении в БД: service, order_id, error_type

FATAL - критический сбой, требует немедленного внимания
ERROR - ошибки, проихождение которых нужно расследовать
WARN - нестандартные, но допустимые ситуации
INFO - бизнес события и пользовательские действия
DEBUG - при локальной отладке или решения инцидентов (на stage слое, например)
TRACE - самая детальная информация, отладка в тестовом (локальном) окружении


-----------------


Мотивация

В текущей ситуации ошибки и проблемы часто диагностируются со слов клиента, что приводит к:
- Высокой нагрузке на поддержку
- Увеличению времени на расследование инцидентов
- Утрате доверия пользователей

А внедрение централизованного логирования позволит быстрее находить причины сбоев,
сократить время на расследование инцидентов, сэкономить время ручного захода и поиска

Приоритеты:

1. Shop API - напрямую работает с пользователями, большинство инцидентов
2. CRM - потенциальные ошибки менеджеров
3. MES - финальная сборка заказов
4. RabbitMQ - возможная потеря сообщений
5. Postgresql - лишним не будет


-----------------


Предлагаемое решение

Стек: Logstash + Elasticsearch (OpenSearch)

- Создать индексные шаблоны по системам
- Маскировать чувствительные данные
- Подключение к Jaeger через VPN, аутентификация через корпоративный SSO
- Ролевая модель доступа к логам
- Хранение логов за последние 30 дней, и 60 дней в холодном хранилище (если есть возможность)
- Настройка отправки алертов по шаблонам
- Поиск аномалий (DDoS)
